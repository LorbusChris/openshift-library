{
	"kind": "Template",
	"apiVersion": "v1",
	"metadata": {
		"name": "eap72-postgresql-persistent-s2i",
		"creationTimestamp": null,
		"annotations": {
			"description": "An example Red Hat JBoss EAP 7 application with a persistent PostgreSQL database. For more information about using this template, see https://github.com/jboss-container-images/jboss-eap-7-openshift-image/blob/eap72/README.adoc",
			"iconClass": "icon-eap",
			"openshift.io/display-name": "JBoss EAP 7.2 + PostgreSQL (Persistent, with passthrough TLS)",
			"openshift.io/provider-display-name": "Red Hat, Inc.",
			"tags": "eap,javaee,java,jboss",
			"template.openshift.io/documentation-url": "https://access.redhat.com/documentation/en/red-hat-jboss-enterprise-application-platform/",
			"template.openshift.io/long-description": "This template defines resources needed to develop a Red Hat JBoss Enterprise Application Platform 7.2 based application, including a build configuration, application deployment configuration, database deployment configuration for PostgreSQL using persistence and secure communication using passthrough TLS.",
			"template.openshift.io/support-url": "https://access.redhat.com",
			"version": "1.2.0"
		}
	},
	"message": "A new EAP and persistent PostgreSQL based application with SSL support has been created in your project. The username/password for accessing the PostgreSQL database \"${DB_DATABASE}\" is ${DB_USERNAME}/${DB_PASSWORD}. Please be sure to create the following secrets: \"${HTTPS_SECRET}\" containing the ${HTTPS_KEYSTORE} file used for serving secure content; \"${JGROUPS_ENCRYPT_SECRET}\" containing the ${JGROUPS_ENCRYPT_KEYSTORE} file used for securing JGroups communications.",
	"objects": [
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The web server's http port.",
					"service.alpha.openshift.io/dependencies": "[{\"name\": \"${APPLICATION_NAME}-postgresql\", \"kind\": \"Service\"}]"
				},
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}"
			},
			"spec": {
				"ports": [
					{
						"port": 8080,
						"targetPort": 8080
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The web server's https port.",
					"service.alpha.openshift.io/dependencies": "[{\"name\": \"${APPLICATION_NAME}-postgresql\", \"kind\": \"Service\"}]"
				},
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "secure-${APPLICATION_NAME}"
			},
			"spec": {
				"ports": [
					{
						"port": 8443,
						"targetPort": 8443
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The database server's port."
				},
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}-postgresql"
			},
			"spec": {
				"ports": [
					{
						"port": 5432,
						"targetPort": 5432
					}
				],
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-postgresql"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"annotations": {
					"description": "The JGroups ping port for clustering.",
					"service.alpha.kubernetes.io/tolerate-unready-endpoints": "true"
				},
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}-ping"
			},
			"spec": {
				"clusterIP": "None",
				"ports": [
					{
						"name": "ping",
						"port": 8888
					}
				],
				"publishNotReadyAddresses": true,
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"id": "${APPLICATION_NAME}-http",
			"kind": "Route",
			"metadata": {
				"annotations": {
					"description": "Route for application's http service."
				},
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}"
			},
			"spec": {
				"to": {
					"name": "${APPLICATION_NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"id": "${APPLICATION_NAME}-https",
			"kind": "Route",
			"metadata": {
				"annotations": {
					"description": "Route for application's https service."
				},
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "secure-${APPLICATION_NAME}"
			},
			"spec": {
				"host": "${HOSTNAME_HTTPS}",
				"tls": {
					"termination": "passthrough"
				},
				"to": {
					"name": "secure-${APPLICATION_NAME}"
				}
			}
		},
		{
			"apiVersion": "v1",
			"kind": "ImageStream",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}"
			}
		},
		{
			"apiVersion": "v1",
			"kind": "BuildConfig",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}"
			},
			"spec": {
				"output": {
					"to": {
						"kind": "ImageStreamTag",
						"name": "${APPLICATION_NAME}:latest"
					}
				},
				"source": {
					"contextDir": "${CONTEXT_DIR}",
					"git": {
						"ref": "${SOURCE_REPOSITORY_REF}",
						"uri": "${SOURCE_REPOSITORY_URL}"
					},
					"type": "Git"
				},
				"strategy": {
					"sourceStrategy": {
						"env": [
							{
								"name": "MAVEN_MIRROR_URL",
								"value": "${MAVEN_MIRROR_URL}"
							},
							{
								"name": "MAVEN_ARGS_APPEND",
								"value": "${MAVEN_ARGS_APPEND}"
							},
							{
								"name": "ARTIFACT_DIR",
								"value": "${ARTIFACT_DIR}"
							}
						],
						"forcePull": true,
						"from": {
							"kind": "ImageStreamTag",
							"name": "jboss-eap72-openshift:1.2",
							"namespace": "${IMAGE_STREAM_NAMESPACE}"
						},
						"incremental": true
					},
					"type": "Source"
				},
				"triggers": [
					{
						"github": {
							"secret": "${GITHUB_WEBHOOK_SECRET}"
						},
						"type": "GitHub"
					},
					{
						"generic": {
							"secret": "${GENERIC_WEBHOOK_SECRET}"
						},
						"type": "Generic"
					},
					{
						"imageChange": {},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "DeploymentConfig",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}"
			},
			"spec": {
				"replicas": 1,
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}"
				},
				"strategy": {
					"type": "Recreate"
				},
				"template": {
					"metadata": {
						"labels": {
							"application": "${APPLICATION_NAME}",
							"deploymentConfig": "${APPLICATION_NAME}"
						},
						"name": "${APPLICATION_NAME}"
					},
					"spec": {
						"containers": [
							{
								"env": [
									{
										"name": "DB_SERVICE_PREFIX_MAPPING",
										"value": "${APPLICATION_NAME}-postgresql=DB"
									},
									{
										"name": "DB_JNDI",
										"value": "${DB_JNDI}"
									},
									{
										"name": "DB_USERNAME",
										"value": "${DB_USERNAME}"
									},
									{
										"name": "DB_PASSWORD",
										"value": "${DB_PASSWORD}"
									},
									{
										"name": "DB_DATABASE",
										"value": "${DB_DATABASE}"
									},
									{
										"name": "TX_DATABASE_PREFIX_MAPPING",
										"value": "${APPLICATION_NAME}-postgresql=DB"
									},
									{
										"name": "DB_MIN_POOL_SIZE",
										"value": "${DB_MIN_POOL_SIZE}"
									},
									{
										"name": "DB_MAX_POOL_SIZE",
										"value": "${DB_MAX_POOL_SIZE}"
									},
									{
										"name": "DB_TX_ISOLATION",
										"value": "${DB_TX_ISOLATION}"
									},
									{
										"name": "JGROUPS_PING_PROTOCOL",
										"value": "dns.DNS_PING"
									},
									{
										"name": "OPENSHIFT_DNS_PING_SERVICE_NAME",
										"value": "${APPLICATION_NAME}-ping"
									},
									{
										"name": "OPENSHIFT_DNS_PING_SERVICE_PORT",
										"value": "8888"
									},
									{
										"name": "HTTPS_KEYSTORE_DIR",
										"value": "/etc/eap-secret-volume"
									},
									{
										"name": "HTTPS_KEYSTORE",
										"value": "${HTTPS_KEYSTORE}"
									},
									{
										"name": "HTTPS_KEYSTORE_TYPE",
										"value": "${HTTPS_KEYSTORE_TYPE}"
									},
									{
										"name": "HTTPS_NAME",
										"value": "${HTTPS_NAME}"
									},
									{
										"name": "HTTPS_PASSWORD",
										"value": "${HTTPS_PASSWORD}"
									},
									{
										"name": "MQ_CLUSTER_PASSWORD",
										"value": "${MQ_CLUSTER_PASSWORD}"
									},
									{
										"name": "MQ_QUEUES",
										"value": "${MQ_QUEUES}"
									},
									{
										"name": "MQ_TOPICS",
										"value": "${MQ_TOPICS}"
									},
									{
										"name": "JGROUPS_ENCRYPT_SECRET",
										"value": "${JGROUPS_ENCRYPT_SECRET}"
									},
									{
										"name": "JGROUPS_ENCRYPT_KEYSTORE_DIR",
										"value": "/etc/jgroups-encrypt-secret-volume"
									},
									{
										"name": "JGROUPS_ENCRYPT_KEYSTORE",
										"value": "${JGROUPS_ENCRYPT_KEYSTORE}"
									},
									{
										"name": "JGROUPS_ENCRYPT_NAME",
										"value": "${JGROUPS_ENCRYPT_NAME}"
									},
									{
										"name": "JGROUPS_ENCRYPT_PASSWORD",
										"value": "${JGROUPS_ENCRYPT_PASSWORD}"
									},
									{
										"name": "JGROUPS_CLUSTER_PASSWORD",
										"value": "${JGROUPS_CLUSTER_PASSWORD}"
									},
									{
										"name": "AUTO_DEPLOY_EXPLODED",
										"value": "${AUTO_DEPLOY_EXPLODED}"
									},
									{
										"name": "DEFAULT_JOB_REPOSITORY",
										"value": "${APPLICATION_NAME}-postgresql"
									},
									{
										"name": "TIMER_SERVICE_DATA_STORE",
										"value": "${APPLICATION_NAME}-postgresql"
									}
								],
								"image": "${APPLICATION_NAME}",
								"imagePullPolicy": "Always",
								"livenessProbe": {
									"exec": {
										"command": [
											"/bin/bash",
											"-c",
											"/opt/eap/bin/livenessProbe.sh"
										]
									},
									"initialDelaySeconds": 60
								},
								"name": "${APPLICATION_NAME}",
								"ports": [
									{
										"containerPort": 8778,
										"name": "jolokia",
										"protocol": "TCP"
									},
									{
										"containerPort": 8080,
										"name": "http",
										"protocol": "TCP"
									},
									{
										"containerPort": 8443,
										"name": "https",
										"protocol": "TCP"
									},
									{
										"containerPort": 8888,
										"name": "ping",
										"protocol": "TCP"
									}
								],
								"readinessProbe": {
									"exec": {
										"command": [
											"/bin/bash",
											"-c",
											"/opt/eap/bin/readinessProbe.sh false"
										]
									},
									"initialDelaySeconds": 10
								},
								"resources": {
									"limits": {
										"memory": "${MEMORY_LIMIT}"
									}
								},
								"volumeMounts": [
									{
										"mountPath": "/etc/eap-secret-volume",
										"name": "eap-keystore-volume",
										"readOnly": true
									},
									{
										"mountPath": "/etc/jgroups-encrypt-secret-volume",
										"name": "eap-jgroups-keystore-volume",
										"readOnly": true
									}
								]
							}
						],
						"terminationGracePeriodSeconds": 75,
						"volumes": [
							{
								"name": "eap-keystore-volume",
								"secret": {
									"secretName": "${HTTPS_SECRET}"
								}
							},
							{
								"name": "eap-jgroups-keystore-volume",
								"secret": {
									"secretName": "${JGROUPS_ENCRYPT_SECRET}"
								}
							}
						]
					}
				},
				"triggers": [
					{
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"${APPLICATION_NAME}"
							],
							"from": {
								"kind": "ImageStreamTag",
								"name": "${APPLICATION_NAME}:latest"
							}
						},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "DeploymentConfig",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}-postgresql"
			},
			"spec": {
				"replicas": 1,
				"selector": {
					"deploymentConfig": "${APPLICATION_NAME}-postgresql"
				},
				"strategy": {
					"type": "Recreate"
				},
				"template": {
					"metadata": {
						"labels": {
							"application": "${APPLICATION_NAME}",
							"deploymentConfig": "${APPLICATION_NAME}-postgresql"
						},
						"name": "${APPLICATION_NAME}-postgresql"
					},
					"spec": {
						"containers": [
							{
								"env": [
									{
										"name": "POSTGRESQL_USER",
										"value": "${DB_USERNAME}"
									},
									{
										"name": "POSTGRESQL_PASSWORD",
										"value": "${DB_PASSWORD}"
									},
									{
										"name": "POSTGRESQL_DATABASE",
										"value": "${DB_DATABASE}"
									},
									{
										"name": "POSTGRESQL_MAX_CONNECTIONS",
										"value": "${POSTGRESQL_MAX_CONNECTIONS}"
									},
									{
										"name": "POSTGRESQL_MAX_PREPARED_TRANSACTIONS",
										"value": "${POSTGRESQL_MAX_CONNECTIONS}"
									},
									{
										"name": "POSTGRESQL_SHARED_BUFFERS",
										"value": "${POSTGRESQL_SHARED_BUFFERS}"
									}
								],
								"image": "postgresql",
								"imagePullPolicy": "Always",
								"livenessProbe": {
									"initialDelaySeconds": 30,
									"tcpSocket": {
										"port": 5432
									},
									"timeoutSeconds": 1
								},
								"name": "${APPLICATION_NAME}-postgresql",
								"ports": [
									{
										"containerPort": 5432,
										"protocol": "TCP"
									}
								],
								"readinessProbe": {
									"exec": {
										"command": [
											"/bin/sh",
											"-i",
											"-c",
											"psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"
										]
									},
									"initialDelaySeconds": 5,
									"timeoutSeconds": 1
								},
								"volumeMounts": [
									{
										"mountPath": "/var/lib/pgsql/data",
										"name": "${APPLICATION_NAME}-postgresql-pvol"
									}
								]
							}
						],
						"terminationGracePeriodSeconds": 60,
						"volumes": [
							{
								"name": "${APPLICATION_NAME}-postgresql-pvol",
								"persistentVolumeClaim": {
									"claimName": "${APPLICATION_NAME}-postgresql-claim"
								}
							}
						]
					}
				},
				"triggers": [
					{
						"imageChangeParams": {
							"automatic": true,
							"containerNames": [
								"${APPLICATION_NAME}-postgresql"
							],
							"from": {
								"kind": "ImageStreamTag",
								"name": "postgresql:${POSTGRESQL_IMAGE_STREAM_TAG}",
								"namespace": "${IMAGE_STREAM_NAMESPACE}"
							}
						},
						"type": "ImageChange"
					},
					{
						"type": "ConfigChange"
					}
				]
			}
		},
		{
			"apiVersion": "v1",
			"kind": "PersistentVolumeClaim",
			"metadata": {
				"labels": {
					"application": "${APPLICATION_NAME}"
				},
				"name": "${APPLICATION_NAME}-postgresql-claim"
			},
			"spec": {
				"accessModes": [
					"ReadWriteOnce"
				],
				"resources": {
					"requests": {
						"storage": "${VOLUME_CAPACITY}"
					}
				}
			}
		}
	],
	"parameters": [
		{
			"name": "APPLICATION_NAME",
			"displayName": "Application Name",
			"description": "The name for the application.",
			"value": "eap-app",
			"required": true
		},
		{
			"name": "HOSTNAME_HTTPS",
			"displayName": "Custom https Route Hostname",
			"description": "Custom hostname for https service route.  Leave blank for default hostname, e.g.: secure-\u003capplication-name\u003e-\u003cproject\u003e.\u003cdefault-domain-suffix\u003e"
		},
		{
			"name": "SOURCE_REPOSITORY_URL",
			"displayName": "Git Repository URL",
			"description": "Git source URI for application",
			"value": "https://github.com/jboss-openshift/openshift-quickstarts",
			"required": true
		},
		{
			"name": "SOURCE_REPOSITORY_REF",
			"displayName": "Git Reference",
			"description": "Git branch/tag reference",
			"value": "1.3"
		},
		{
			"name": "CONTEXT_DIR",
			"displayName": "Context Directory",
			"description": "Path within Git project to build; empty for root project directory.",
			"value": "todolist/todolist-jdbc"
		},
		{
			"name": "DB_JNDI",
			"displayName": "Database JNDI Name",
			"description": "Database JNDI name used by application to resolve the datasource, e.g. java:/jboss/datasources/postgresql",
			"value": "java:jboss/datasources/TodoListDS"
		},
		{
			"name": "DB_DATABASE",
			"displayName": "Database Name",
			"description": "Database name",
			"value": "root",
			"required": true
		},
		{
			"name": "VOLUME_CAPACITY",
			"displayName": "Database Volume Capacity",
			"description": "Size of persistent storage for database volume.",
			"value": "1Gi",
			"required": true
		},
		{
			"name": "MQ_QUEUES",
			"displayName": "Queues",
			"description": "Queue names, separated by commas. These queues will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all queues used by the application *must* be specified here in order to be created automatically on the remote AMQ broker."
		},
		{
			"name": "MQ_TOPICS",
			"displayName": "Topics",
			"description": "Topic names, separated by commas. These topics will be automatically created when the broker starts. Also, they will be made accessible as JNDI resources in EAP. Note that all topics used by the application *must* be specified here in order to be created automatically on the remote AMQ broker."
		},
		{
			"name": "HTTPS_SECRET",
			"displayName": "Server Keystore Secret Name",
			"description": "The name of the secret containing the keystore file",
			"value": "eap7-app-secret",
			"required": true
		},
		{
			"name": "HTTPS_KEYSTORE",
			"displayName": "Server Keystore Filename",
			"description": "The name of the keystore file within the secret",
			"value": "keystore.jks"
		},
		{
			"name": "HTTPS_KEYSTORE_TYPE",
			"displayName": "Server Keystore Type",
			"description": "The type of the keystore file (JKS or JCEKS)"
		},
		{
			"name": "HTTPS_NAME",
			"displayName": "Server Certificate Name",
			"description": "The name associated with the server certificate"
		},
		{
			"name": "HTTPS_PASSWORD",
			"displayName": "Server Keystore Password",
			"description": "The password for the keystore and certificate"
		},
		{
			"name": "DB_MIN_POOL_SIZE",
			"displayName": "Datasource Minimum Pool Size",
			"description": "Sets xa-pool/min-pool-size for the configured datasource."
		},
		{
			"name": "DB_MAX_POOL_SIZE",
			"displayName": "Datasource Maximum Pool Size",
			"description": "Sets xa-pool/max-pool-size for the configured datasource."
		},
		{
			"name": "DB_TX_ISOLATION",
			"displayName": "Datasource Transaction Isolation",
			"description": "Sets transaction-isolation for the configured datasource."
		},
		{
			"name": "POSTGRESQL_MAX_CONNECTIONS",
			"displayName": "PostgreSQL Maximum number of connections",
			"description": "The maximum number of client connections allowed. This also sets the maximum number of prepared transactions."
		},
		{
			"name": "POSTGRESQL_SHARED_BUFFERS",
			"displayName": "PostgreSQL Shared Buffers",
			"description": "Configures how much memory is dedicated to PostgreSQL for caching data."
		},
		{
			"name": "MQ_CLUSTER_PASSWORD",
			"displayName": "AMQ cluster password",
			"description": "AMQ cluster admin password",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}",
			"required": true
		},
		{
			"name": "DB_USERNAME",
			"displayName": "Database Username",
			"description": "Database user name",
			"generate": "expression",
			"from": "user[a-zA-Z0-9]{3}",
			"required": true
		},
		{
			"name": "DB_PASSWORD",
			"displayName": "Database Password",
			"description": "Database user password",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}",
			"required": true
		},
		{
			"name": "GITHUB_WEBHOOK_SECRET",
			"displayName": "Github Webhook Secret",
			"description": "GitHub trigger secret",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}",
			"required": true
		},
		{
			"name": "GENERIC_WEBHOOK_SECRET",
			"displayName": "Generic Webhook Secret",
			"description": "Generic build trigger secret",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}",
			"required": true
		},
		{
			"name": "IMAGE_STREAM_NAMESPACE",
			"displayName": "ImageStream Namespace",
			"description": "Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.",
			"value": "openshift",
			"required": true
		},
		{
			"name": "JGROUPS_ENCRYPT_SECRET",
			"displayName": "JGroups Secret Name",
			"description": "The name of the secret containing the keystore file",
			"value": "eap7-app-secret"
		},
		{
			"name": "JGROUPS_ENCRYPT_KEYSTORE",
			"displayName": "JGroups Keystore Filename",
			"description": "The name of the keystore file within the secret",
			"value": "jgroups.jceks"
		},
		{
			"name": "JGROUPS_ENCRYPT_NAME",
			"displayName": "JGroups Certificate Name",
			"description": "The name associated with the server certificate"
		},
		{
			"name": "JGROUPS_ENCRYPT_PASSWORD",
			"displayName": "JGroups Keystore Password",
			"description": "The password for the keystore and certificate"
		},
		{
			"name": "JGROUPS_CLUSTER_PASSWORD",
			"displayName": "JGroups Cluster Password",
			"description": "JGroups cluster password",
			"generate": "expression",
			"from": "[a-zA-Z0-9]{8}",
			"required": true
		},
		{
			"name": "AUTO_DEPLOY_EXPLODED",
			"displayName": "Deploy Exploded Archives",
			"description": "Controls whether exploded deployment content should be automatically deployed",
			"value": "false"
		},
		{
			"name": "MAVEN_MIRROR_URL",
			"displayName": "Maven mirror URL",
			"description": "Maven mirror to use for S2I builds"
		},
		{
			"name": "MAVEN_ARGS_APPEND",
			"displayName": "Maven Additional Arguments",
			"description": "Maven additional arguments to use for S2I builds"
		},
		{
			"name": "ARTIFACT_DIR",
			"description": "List of directories from which archives will be copied into the deployment folder. If unspecified, all archives in /target will be copied."
		},
		{
			"name": "POSTGRESQL_IMAGE_STREAM_TAG",
			"displayName": "PostgreSQL Image Stream Tag",
			"description": "The tag to use for the \"postgresql\" image stream.  Typically, this aligns with the major.minor version of PostgreSQL.",
			"value": "9.5",
			"required": true
		},
		{
			"name": "MEMORY_LIMIT",
			"description": "Container memory limit",
			"value": "1Gi"
		}
	],
	"labels": {
		"template": "eap72-postgresql-persistent-s2i",
		"xpaas": "1.2.0"
	}
}